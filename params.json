{"tagline":"A generic, basic Tomcat Application Setup","google":"UA-30854548-1","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Introduction\r\nThis project is about simplifying the hosting of a multi-application-environment using seperate tomcat installations. \r\nThe tomcat-app-skeleton setup allows to combine different java- and tomcat versions to run a web application in it's own, specific environment.\r\n\r\nFrom the Tomcat docs (RUNNING.txt):\r\n\r\n> __Advanced Configuration - Multiple Tomcat Instances__\r\n> \r\n> In many circumstances, it is desirable to have a single copy of a Tomcat \r\n> binary distribution shared among multiple users on the same server.  To make\r\n> this possible, you can set the $CATALINA_BASE environment variable to e\r\n> directory that contains the files for your 'personal' Tomcat instance.\r\n> \r\n> When you use $CATALINA_BASE, Tomcat will calculate all relative references for\r\n> files in the following directories based on the value of $CATALINA_BASE instead\r\n> of $CATALINA_HOME:\r\n> \r\n> * bin  - Only setenv.sh (*nix), setenv.bat (windows) and tomcat-juli.jar\r\n> * conf - Server configuration files (including server.xml)\r\n> * logs - Log and output files\r\n> * webapps - Automatically loaded web applications\r\n> * work - Temporary working directories for web applications \r\n> * temp - Directory used by the JVM for temporary files (java.io.tmpdir)\r\n> \r\n> Note that by default Tomcat will first try to load classes and JARs from\r\n> $CATALINA_BASE/lib and then $CATALINA_HOME/lib. You can place instance specific\r\n> JARs and classes (e.g. JDBC drivers) in $CATALINA_BASE/lib whilst keeping the\r\n> standard Tomcat JARs in $CATALINA_HOME/lib.\r\n> \r\n> If you do not set $CATALINA_BASE, $CATALINA_BASE will default to the same value\r\n> as $CATALINA_HOME, which means that the same directory is used for all relative\r\n> path resolutions.\r\n\r\n\r\n## Prerequisites\r\nFor this setup to work you need at least one Java (JRE or JDK) and one Tomcat installation on your machine which can be applied to a specific application. To make even more sense I usually happen to have the three main tomcat versions available to the app-skeleton to be able to test a web application in different tomcat contexts in my DEV environment. This usually looks like this:\r\n\r\n```\r\n/opt/apache-tomcat5 -> /opt/apache-tomcat-5.5/\r\n/opt/apache-tomcat-5.5/\r\n/opt/apache-tomcat6 -> /opt/apache-tomcat-6.0.26/\r\n/opt/apache-tomcat-6.0.26/\r\n/opt/apache-tomcat-6.0.35/\r\n/opt/apache-tomcat7 -> /opt/apache-tomcat-7.0.26/\r\n/opt/apache-tomcat-7.0.26/\r\n/opt/jre1.6.0_20/\r\n/opt/jre1.7.0_03/\r\n```\r\n\r\nwhere __apache-tomcat5__, __apache-tomcat6__ and __apache-tomcat7__ are symlinks to the newest corresponding major version of the tomcat installation.\r\n\r\n\r\n# Folder structure\r\n\r\n## bin/\r\nContains the scripts used for i.e. running and stopping you application.\r\n__Note__ that those scripts need execution permission!\r\nYou can add additional executables to this directory if needed.\r\n\r\n### start.sh\r\nThis is the start-script of your web application. \r\nIt is also used to configure the application's environment:\r\n\r\n```bash\r\nexport JAVA_HOME=/path/to/java/runtime/\r\nexport CATALINA_HOME=/path/to/tomcat/\r\nexport CATALINA_BASE=/path/to/my/app\r\nexport CATALINA_PID=${CATALINA_BASE}/temp/myapp.pid\r\nexport CATALINA_OPTS=\"-Dfile.root=${CATALINA_BASE}/storage -Dlog.root=${CATALINA_BASE}/logs\"\r\n\r\n${CATALINA_HOME}/bin/catalina.sh start\r\n```\r\n\r\n<table>\r\n\t<tr>\r\n\t\t<th width=\"20%\">Variable</th>\r\n\t\t<th>Description</th>\r\n\t\t<th width=\"20%\">Sample</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JAVA_HOME</tt></td>\r\n\t\t<td valign=\"top\">Home path of the Java Runtime Environment (or JDK). Must point at a JDK installation to run tomcat with the \"debug\" argument.</td>\r\n\t\t<td valign=\"top\"><file>/opt/java-1.6/jdk1.6.0_20</file></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_HOME</tt></td>\r\n\t\t<td valign=\"top\">Home path of the tomcat installation to use</td>\r\n\t\t<td valign=\"top\"><file>/opt/apache-tomcat7</file></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_BASE</tt></td>\r\n\t\t<td valign=\"top\">Base path of your application (Base directory for resolving dynamic portions of a Catalina installation.  If not present, resolves to the same directory that CATALINA_HOME points to)</td>\r\n\t\t<td valign=\"top\"><file>/path/to/my/app</file></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_PID</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Path of the file which contains the pid of the catalina startup java process, when start (fork) is used. This is essential for _start.sh_ and _stop.sh_ to work properly</td>\r\n\t\t<td valign=\"top\">${CATALINA_BASE}/temp/myapp.pid</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_OPTS</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Java runtime options used when the \"start\", \"run\" or \"debug\" command is executed. Include here and not in JAVA_OPTS all options, that should only be used by Tomcat itself, not by the stop process, the version command etc. Examples are heap size, GC logging, JMX ports etc.\r\n\t\tI Usually add two system properties (<em>file.root</em> & <em>log.root</em>) to a web application's environment to simplify logging and access to the underlying filesystem in a multiple environment scenario (test, dev, staging, production) where those paths may vary.</td>\r\n\t\t<td valign=\"top\"><strong>default:</strong> \"-Dfile.root=${CATALINA_BASE}/storage -Dlog.root=${CATALINA_BASE}/logs\"</td>\r\n\t</tr>\r\n</table>\r\n\r\nFurther available variables are - as explained in the tomcat docs in catalina.sh:\r\n\r\n<table>\r\n\t<tr>\r\n\t\t<th width=\"20%\">Variable</th>\r\n\t\t<th>Description</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_OUT</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Full path to a file where stdout and stderr will be redirected. \r\n\t\tDefault is $CATALINA_BASE/logs/catalina.out</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>CATALINA_TMPDIR</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Directory path location of temporary directory the JVM should use (java.io.tmpdir). Defaults to $CATALINA_BASE/temp.</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JRE_HOME</tt></td>\r\n\t\t<td valign=\"top\">Must point at your Java Runtime installation. Defaults to JAVA_HOME if empty. If JRE_HOME and JAVA_HOME are both set, JRE_HOME is used.</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JAVA_ENDORSED_DIRS</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Lists of of colon separated directories containing some jars in order to allow replacement of APIs created outside of the JCP (i.e. DOM and SAX from W3C). It can also be used to update the XML parser implementation. Defaults to $CATALINA_HOME/endorsed.</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JPDA_TRANSPORT</tt></td>\r\n\t\t<td valign=\"top\">(Optional) JPDA transport used when the \"jpda start\" command is executed. The default is \"dt_socket\".</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JPDA_ADDRESS</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Java runtime options used when the \"jpda start\" command is executed. The default is 8000.</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JPDA_SUSPEND</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Java runtime options used when the \"jpda start\" command is executed. Specifies whether JVM should suspend execution immediately after startup. Default is \"n\".</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>JPDA_OPTS</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Java runtime options used when the \"jpda start\" command is executed. If used, JPDA_TRANSPORT, JPDA_ADDRESS, and JPDA_SUSPEND are ignored. Thus, all required jpda options MUST be specified. The default is:\r\n\t\t\t<pre>\r\n\t\t\t\t-agentlib:jdwp=transport=$JPDA_TRANSPORT,\r\n\t\t\t\t\taddress=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND\r\n\t\t\t</pre>\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>LOGGING_CONFIG</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Override Tomcat's logging config file Example (all one line)\r\n\t\t\t<pre>LOGGING_CONFIG=\"-Djava.util.logging.config.file=$CATALINA_BASE/conf/logging.properties\"</pre></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td valign=\"top\"><tt>LOGGING_MANAGER</tt></td>\r\n\t\t<td valign=\"top\">(Optional) Override Tomcat's logging manager Example (all one line)\r\n\t\t\t<pre>LOGGING_MANAGER=\"-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\"</pre></td>\r\n\t</tr>\r\n</table>\r\n\r\n### stop.sh\r\nThis script can be used to gracefuly stop the running tomcat containing your web application.\r\nIt basically contains the same catalina configuration as the corresponding _start.sh_.\r\n\r\n```bash\r\nexport JAVA_HOME=/path/to/java/runtime/\r\nexport CATALINA_HOME=/path/to/tomcat/\r\nexport CATALINA_BASE=/path/to/my/app\r\nexport CATALINA_PID=${CATALINA_BASE}/temp/myapp.pid\r\n \r\n${CATALINA_HOME}/bin/catalina.sh stop\r\n```\r\n\r\n__Note__ that all paths in _start.sh_ and _stop.sh_ have to be identical for the scripts to work properly!\r\n\r\n## conf/\r\nThe _conf/_ folder contains the tomcat's configuration. Therefor every knwon configuration file can be overwritten in here. In the default setup the following configurations will be included. Refer to the [tomcat configuration guide](http://tomcat.apache.org/tomcat-7.0-doc/) for further information on configuring a tomcat installation.\r\n\r\n### Catalina/localhost/manager.xml\r\nThis file holds the context configuration for the tomcat's default manager application. The manager will be referenced from CATALINA_HOME as configured in your _start.sh_:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Context docBase=\"${catalina.home}/webapps/manager\"\r\n    antiResourceLocking=\"false\" privileged=\"true\" >\r\n</Context>\r\n```\r\n\r\n__From the tomcat docs (RUNNING.txt):__\r\n\r\n> It might be useful to note that the values of __CATALINA_HOME__ and\r\n> __CATALINA_BASE__ can be referenced in the XML configuration files processed\r\n> by Tomcat as __${catalina.home}__ and __${catalina.base}__ respectively.\r\n\r\n### context.xml\r\nContains the container context configuration specifying application resources. \r\nInitially this configuration file is empty.\r\n\r\n### tomcat-users.xml\r\nThe tomcat roles and user file. This file initially contains some default users that can be used from within your application (i.e. security constraints in your application's _web.xml_):\r\n\r\n```xml\r\n<?xml version='1.0' encoding='utf-8'?>\r\n<tomcat-users>\r\n        <role rolename=\"admin\"/>\r\n        <role rolename=\"manager\"/>\r\n        <role rolename=\"manager-gui\"/>\r\n        <role rolename=\"tomcat\"/>\r\n        <user username=\"tomcat\" password=\"tomcat\" roles=\"admin,manager,tomcat,manager-gui\"/>\r\n</tomcat-users>\r\n```\r\n\r\n### server.xml\r\nTomcat server configuration. The configuration contains some minor changes to the Connectors' ports in constrast to a freshly downloaded tomcat installation. The port used go from 11000 up to 11999 splitted in blocks á 10 Ports per application (at least that's the plan). You can, of course, apply other port ranges if neccessary.\r\n\r\n## lib/\r\nLibraries and classes. Add your application specific libraries (if not already compiled inside your war-file) such as database drivers here.\r\n\r\n__From the tomcat docs:__\r\n\r\n> In the default configuration the JAR libraries and classes both in\r\n> CATALINA_BASE/lib and in CATALINA_HOME/lib will be added to the common\r\n> classpath, but the ones in CATALINA_BASE will be added first and thus will\r\n> be searched first.\r\n>\r\n> The idea is that you may leave the standard Tomcat libraries in\r\n> CATALINA_HOME/lib and add other ones such as database drivers into\r\n> CATALINA_BASE/lib.\r\n>\r\n> In general it is advised to never share libraries between web applications,\r\n> but put them into WEB-INF/lib directories inside the applications. See\r\n> Classloading documentation in the User Guide for details.\r\n\r\n\r\n## logs/\r\nThe application's log directory. This directory will be used for the tomcat's _catalina.out_ for example.\r\nAlso this directory will be available to the application as system property __log.root__ by default. This property may be used directly in your log4j.properties file for example:\r\n\r\n```\r\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\r\nlog4j.appender.R.File=${log.root}/myApp.log\r\n```\r\n\r\n## server/\r\nServer directory of the catalina engine.\r\n\r\n## storage/\r\nThis is the applications default file-base. All data like persistent files, a Lucene index or a Derby database directory should be placed in here. To simplify access to this folder, it will be available to the application as system property __file.root__.\r\nTherefor this can be used directly inside your spring configuration for example:\r\n\r\n```xml\r\n<bean id=\"mySampleBean\" class=\"com.acme.Importer\" p:importFilesPath=\"${file.root}/import\"/>\r\n```\r\n\r\nOr you can use it by calling\r\n\r\n```java \r\nSystem.getProperty(\"file.root\");\r\n```\r\n\r\n## temp/\r\nDirectory used by the JVM for temporary files. Will be set as system property __java.io.tmpdir__.\r\nThis directory will also be used for the application's/tomcat's PID-file by default.\r\n\r\n## webapps/\r\nAutomatically loaded web applications. Place your war-files in here.\r\n\r\n## work/\r\nTemporary working directories for web applications.\r\n","name":"Tomcat-app-skeleton"}